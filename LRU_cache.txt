import java.util.HashMap;
import java.util.Scanner;

public class LRUCacheInteractive {

    static class Node {
        int key, value;
        Node prev, next;

        Node(int k, int v) {
            key = k;
            value = v;
        }
    }

    static class LRUCache {
        private final int capacity;
        private final HashMap<Integer, Node> map;
        private final Node head, tail;

        public LRUCache(int capacity) {
            this.capacity = capacity;
            map = new HashMap<>();
            head = new Node(0, 0); // dummy head
            tail = new Node(0, 0); // dummy tail
            head.next = tail;
            tail.prev = head;
        }

        public int get(int key) {
            if (map.containsKey(key)) {
                Node node = map.get(key);
                moveToFront(node);
                return node.value;
            }
            return -1;
        }

        public void put(int key, int value) {
            if (map.containsKey(key)) {
                Node node = map.get(key);
                node.value = value;
                moveToFront(node);
            } else {
                if (map.size() == capacity) {
                    Node lru = tail.prev;
                    map.remove(lru.key);
                    removeNode(lru);
                }
                Node newNode = new Node(key, value);
                map.put(key, newNode);
                addToFront(newNode);
            }
        }

        private void moveToFront(Node node) {
            removeNode(node);
            addToFront(node);
        }

        private void addToFront(Node node) {
            Node afterHead = head.next;
            head.next = node;
            node.prev = head;
            node.next = afterHead;
            afterHead.prev = node;
        }

        private void removeNode(Node node) {
            Node before = node.prev;
            Node after = node.next;
            before.next = after;
            after.prev = before;
        }

        public void displayCache() {
            Node current = head.next;
            System.out.print("Current Cache: ");
            while (current != tail) {
                System.out.print("[" + current.key + ":" + current.value + "] ");
                current = current.next;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter LRU cache capacity: ");
        int cap = scanner.nextInt();
        LRUCache cache = new LRUCache(cap);

        while (true) {
            System.out.println("\n--- LRU Cache Menu ---");
            System.out.println("1. Put key-value");
            System.out.println("2. Get value by key");
            System.out.println("3. Show cache");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter key (integer): ");
                    int key = scanner.nextInt();
                    System.out.print("Enter value (integer): ");
                    int value = scanner.nextInt();
                    cache.put(key, value);
                    System.out.println("Inserted successfully.");
                    break;

                case 2:
                    System.out.print("Enter key to retrieve: ");
                    int k = scanner.nextInt();
                    int val = cache.get(k);
                    if (val != -1) {
                        System.out.println("Value = " + val);
                    } else {
                        System.out.println("Key not found in cache.");
                    }
                    break;

                case 3:
                    cache.displayCache();
                    break;

                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}
